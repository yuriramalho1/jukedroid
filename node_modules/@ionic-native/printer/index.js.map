{"version":3,"sources":["../../../src/@ionic-native/plugins/printer/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,YAAA,EAAc,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAwCtF;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AASH;IAA6B,2BAAiB;IAA9C;;IAkDA,CAAC;gBAlDY,OAAO;IAElB;;;OAGG;IACH,6BAAW,GAAX;QACE,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE;aAChB,IAAI,CAAC,UAAC,GAAQ,IAAK,OAAA,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAA1B,CAA0B,CAAC,CAAC;IACpD,CAAC;IAED;;;OAGG;IAEH,uBAAK,GAAL;QACE,MAAM,CAAC,IAAI,OAAO,CAAM,UAAC,OAAiB;YACxC,SAAO,CAAC,SAAS,EAAE;iBAChB,KAAK,CAAC,UAAC,KAAc,EAAE,KAAU;gBAChC,OAAO,CAAC,EAAE,KAAK,OAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IAEH,sBAAI,GAAJ,cAAuB,MAAM,CAAC,CAAC,CAAC;IAEhC;;;;;OAKG;IAKH,uBAAK,GAAL,UAAM,OAA6B,EAAE,OAAsB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEjF,kBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,sBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAjCA;QADC,YAAY,EAAE;;;;wCAQd;IAOD;QADC,OAAO,EAAE;;;;uCACsB;IAYhC;QAJC,OAAO,CAAC;YACP,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;;wCACoF;IA1C3E,OAAO;QARnB,MAAM,CAAC;YACN,UAAU,EAAE,SAAS;YACrB,MAAM,EAAE,wBAAwB;YAChC,SAAS,EAAE,yBAAyB;YACpC,IAAI,EAAE,kDAAkD;YACxD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACzC,CAAC;OAEW,OAAO,CAkDnB;IAAD,cAAC;;CAlDD,AAkDC,CAlD4B,iBAAiB,GAkD7C;SAlDY,OAAO","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, CordovaCheck, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\nexport interface PrintOptions {\n  /**\n   * The name of the print job and the document\n   */\n  name?: string;\n\n  /**\n   * The network URL of the printer.\n   * Only supported on iOS.\n   */\n  printerId?: string;\n\n  /**\n   * Specifies the duplex mode to use for the print job.\n   * Either double-sided (duplex:true) or single-sided (duplex:false).\n   * Double-sided by default.\n   * Only supported on iOS\n   */\n  duplex?: boolean;\n\n  /**\n   * The orientation of the printed content, portrait or landscape\n   * Portrait by default.\n   */\n  landscape?: boolean;\n\n  /**\n   * If your application only prints black text, setting this property to true can result in better performance in many cases.\n   * False by default.\n   */\n  grayscale?: boolean;\n\n  /**\n   * The Size and position of the print view\n   */\n  bounds?: number[] | any;\n}\n\n/**\n * @name Printer\n * @description Prints documents or HTML rendered content\n * @usage\n * ```typescript\n * import { Printer, PrintOptions } from '@ionic-native/printer';\n *\n * constructor(private printer: Printer) { }\n *\n * ...\n *\n * this.printer.isAvailable().then(onSuccess, onError);\n *\n * let options: PrintOptions = {\n *      name: 'MyDocument',\n *      printerId: 'printer007',\n *      duplex: true,\n *      landscape: true,\n *      grayscale: true\n *    };\n *\n * this.printer.print(content, options).then(onSuccess, onError);\n * ```\n * @interfaces\n * PrintOptions\n */\n@Plugin({\n  pluginName: 'Printer',\n  plugin: 'cordova-plugin-printer',\n  pluginRef: 'cordova.plugins.printer',\n  repo: 'https://github.com/katzer/cordova-plugin-printer',\n  platforms: ['Android', 'iOS', 'Windows']\n})\n\nexport class Printer extends IonicNativePlugin {\n\n  /**\n   * Checks whether the device is capable of printing (uses `check()` internally)\n   * @returns {Promise<boolean>}\n   */\n  isAvailable(): Promise<boolean> {\n    return this.check()\n      .then((res: any) => Promise.resolve(res.avail));\n  }\n\n  /**\n   * Checks if the printer service is available (iOS) or if printer services are installed and enabled (Android).\n   * @return {Promise<any>} returns a promise that resolve with an object indicating whether printing is available, and providing the number of printers available\n   */\n  @CordovaCheck()\n  check(): Promise<any> {\n    return new Promise<any>((resolve: Function) => {\n      Printer.getPlugin()\n        .check((avail: boolean, count: any) => {\n          resolve({ avail, count });\n        });\n    });\n  }\n\n  /**\n   * Displays a system interface allowing the user to select an available printer. To speak with a printer directly you need to know the network address by picking them before via `printer.pick`.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  pick(): Promise<any> { return; }\n\n  /**\n   * Sends content to the printer.\n   * @param content {string | HTMLElement} The content to print. Can be a URL or an HTML string. If a HTML DOM Object is provided, its innerHtml property value will be used.\n   * @param options {PrintOptions} optional. The options to pass to the printer\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 2,\n    errorIndex: 4\n  })\n  print(content: string | HTMLElement, options?: PrintOptions): Promise<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}